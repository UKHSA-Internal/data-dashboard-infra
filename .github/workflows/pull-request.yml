name: Pull Request Workflow

on:
  pull_request:
    branches:
      - "*"

env:
  AWS_REGION: "eu-west-2"

permissions:
  id-token: write
  contents: read

jobs:
  build_base:
    name: Build base env
    runs-on: ubuntu-latest
    outputs:
      target_env: ${{ steps.set_env.outputs.TARGET_ENV }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Ensure SHORT_SHA is Set
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Verify UHD Script
        run: |
          [[ -f uhd.sh ]] || { echo "Error: uhd.sh not found! Exiting."; exit 1; }
          chmod +x uhd.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Determine Environment
        id: set_env
        run: |
          if [[ "${{ github.head_ref }}" == *"auth-dev"* ]]; then
            echo "TARGET_ENV=auth-dev" >> $GITHUB_ENV
            echo "TARGET_ENV=auth-dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.head_ref }}" == *"auth-test"* ]]; then
            echo "TARGET_ENV=auth-test" >> $GITHUB_ENV
            echo "TARGET_ENV=auth-test" >> $GITHUB_OUTPUT
          else
            echo "TARGET_ENV=test" >> $GITHUB_ENV
            echo "TARGET_ENV=test" >> $GITHUB_OUTPUT
          fi

  unit_test_functions:
    needs: [ "build_base" ]
    strategy:
      matrix:
        function: [ lambda-producer-handler, lambda-db-password-rotation, lambda-alarm-notification, legacy-dashboard-redirect-viewer-request, public-api-cloud-front-viewer-request ]
    name: Unit test functions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - name: Test ${{ matrix.function }}
        uses: ./.github/actions/npm-test
        with:
          function-name: ${{ matrix.function }}

  unit_test_report:
    name: Unit test coverage report
    runs-on: ubuntu-latest
    needs: [ "unit_test_functions" ]
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Download test coverage
        uses: actions/download-artifact@v4.1.9
        with:
          path: ./reports

      - name: Unit test report
        uses: ukhsa-internal/jest-coverage-comment-action@v1
        with:
          multiple-files: |
            lambda-producer-handler, ./reports/lambda-producer-handler-coverage-summary/coverage-summary.json
            lambda-db-password-rotation, ./reports/lambda-db-password-rotation-coverage-summary/coverage-summary.json
            lambda-alarm-notification, ./reports/lambda-alarm-notification-coverage-summary/coverage-summary.json
            legacy-dashboard-redirect-viewer-request, ./reports/legacy-dashboard-redirect-viewer-request-coverage-summary/coverage-summary.json
            public-api-cloud-front-viewer-request, ./reports/public-api-cloud-front-viewer-request-coverage-summary/coverage-summary.json
          multiple-junitxml-files: |
            lambda-producer-handler, ./reports/lambda-producer-handler-coverage-report/junit.xml
            lambda-db-password-rotation, ./reports/lambda-db-password-rotation-coverage-report/junit.xml
            lambda-alarm-notification, ./reports/lambda-alarm-notification-coverage-report/junit.xml
            legacy-dashboard-redirect-viewer-request, ./reports/legacy-dashboard-redirect-viewer-request-coverage-report/junit.xml
            public-api-cloud-front-viewer-request, ./reports/public-api-cloud-front-viewer-request-coverage-report/junit.xml
          title: unit test coverage report

  terraform_plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    needs: [ "build_base", "unit_test_functions" ]
    env:
      TARGET_ENV: ${{ needs.build_base.outputs.target_env }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Configure AWS credentials for tools account
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          tools-account-role: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Terraform plan
        run: |
          [[ -f uhd.sh ]] && source uhd.sh
          uhd terraform init
          uhd terraform plan:layer 10-account $TARGET_ENV
          uhd terraform plan:layer 20-app ci-$SHORT_SHA
        shell: zsh {0}

  terraform_apply:
    name: Terraform apply
    runs-on: ubuntu-latest
    needs: [ "build_base", "terraform_plan" ]
    env:
      TARGET_ENV: ${{ needs.build_base.outputs.target_env }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Configure AWS credentials for tools account
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          tools-account-role: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Terraform apply
        run: |
          source uhd.sh
          uhd terraform init
          uhd terraform apply:layer 10-account $TARGET_ENV
          uhd terraform apply:layer 20-app ci-$SHORT_SHA
        shell: zsh {0}

  push_docker_images:
    name: Push docker images
    runs-on: ubuntu-latest
    needs: [ "terraform_apply" ]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials for tools account
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          tools-account-role: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}

      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Pull / push docker images
        run: |
          source uhd.sh
          uhd docker update test ci-$SHORT_SHA
        shell: zsh {0}

  restart_services:
    name: Restart services
    runs-on: ubuntu-latest
    needs: [ "push_docker_images" ]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials for tools account
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          tools-account-role: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Terraform output
        run: |
          source uhd.sh
          uhd terraform init:layer 20-app
          uhd terraform output:layer 20-app ci-$SHORT_SHA
        shell: zsh {0}

      - name: Configure AWS credentials for test account
        uses: ./.github/actions/configure-aws-credentials
        with:
          account-name: 'test'
          aws-region: ${{ env.AWS_REGION }}
          test-account-role: ${{ secrets.UHD_TERRAFORM_ROLE_TEST }}

      - name: Restart ECS services
        run: |
          source uhd.sh
          uhd ecs restart-services
        shell: zsh {0}

      - name: Redeploy lambda functions
        run: |
          source uhd.sh
          uhd lambda restart-functions
        shell: zsh {0}

  terraform_destroy:
    name: Terraform destroy
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ "restart_services" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

      - name: Configure AWS credentials for tools account
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          tools-account-role: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Terraform destroy
        env:
          TARGET_ENV: ${{ needs.build_base.outputs.target_env || 'test' }}
        run: |
          [[ -f uhd.sh ]] || { echo "uhd.sh not found! Exiting."; exit 1; }
          source uhd.sh
          uhd terraform init:layer 20-app
          uhd terraform destroy:layer 20-app "$TARGET_ENV-ci-$SHORT_SHA"
        shell: zsh {0}

  clean_up_remaining_resources:
    name: Clean up remaining resources
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ "terraform_destroy" ]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials for tools account
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          tools-account-role: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}

      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Debug AWS Role Selection
        run: |
          echo "TARGET_ENV is set to: $TARGET_ENV"
          echo "Selected AWS_ROLE: $AWS_ROLE"

      - name: Set AWS Role for Target Environment
        env:
          TARGET_ENV: ${{ needs.build_base.outputs.target_env || 'test' }}
          AWS_ROLE_AUTH_DEV: ${{ secrets.UHD_TERRAFORM_ROLE_AUTH_DEV }}
          AWS_ROLE_AUTH_TEST: ${{ secrets.UHD_TERRAFORM_ROLE_AUTH_TEST }}
          AWS_ROLE_TEST: ${{ secrets.UHD_TERRAFORM_ROLE_TEST }}
        run: |
          if [[ "$TARGET_ENV" == "auth-dev" ]]; then
            echo "AWS_ROLE=$AWS_ROLE_AUTH_DEV" >> $GITHUB_ENV
          elif [[ "$TARGET_ENV" == "auth-test" ]]; then
            echo "AWS_ROLE=$AWS_ROLE_AUTH_TEST" >> $GITHUB_ENV
          else
            echo "AWS_ROLE=$AWS_ROLE_TEST" >> $GITHUB_ENV
          fi

      - name: Ensure uhd.sh is Executable
        run: chmod +x uhd.sh

      - name: Delete secrets
        run: |
          if [[ ! -f uhd.sh ]]; then
            echo "ERROR: uhd.sh not found! Cleanup skipped."
            exit 1
          fi
          source uhd.sh
          uhd secrets delete-all-secrets ci-$SHORT_SHA || echo "Warning: Secret deletion failed!"
        shell: zsh {0}
name: Pull Request Workflow

on:
  pull_request:
    branches:
      - "*"

env:
  AWS_REGION: "eu-west-2"

permissions:
  id-token: write
  contents: read

jobs:
  build_base:
    name: Build base env
    runs-on: ubuntu-latest
    outputs:
      public_env: ${{ steps.set_env.outputs.PUBLIC_ENV }}
      auth_env: ${{ steps.set_env.outputs.AUTH_ENV }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh
      - uses: ./.github/actions/short-sha

      - name: Determine Environment Names
        id: set_env
        run: |
          PUBLIC_ENV="ci-${{ env.SHORT_SHA }}"
          AUTH_ENV="ci-${{ env.SHORT_SHA }}-a"

          echo "PUBLIC_ENV=${PUBLIC_ENV}" >> $GITHUB_ENV
          echo "AUTH_ENV=${AUTH_ENV}" >> $GITHUB_ENV

          echo "PUBLIC_ENV=${PUBLIC_ENV}"
          echo "AUTH_ENV=${AUTH_ENV}"
        shell: bash

      - name: Build base env
        run: |
          source uhd.sh
          uhd terraform init:layer 20-app
          uhd terraform apply:layer 20-app $PUBLIC_ENV
        shell: zsh {0}

  fast_forward_env_branches:
    name: Fast forward env branches
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      deploy_auth_dev: ${{ steps.fast_forward_merge.outputs.deploy_auth_dev }}
      deploy_auth_test: ${{ steps.fast_forward_merge.outputs.deploy_auth_test }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - uses: ./.github/actions/setup-zsh

      - name: Fast forward env branches
        id: fast_forward_merge
        run: |
          echo "Starting fast-forward merge..."
          if scripts/fast-forward-env-branches.sh; then
            echo "Fast forward merge completed successfully."
          else
            echo "Fast forward merge failed!" >&2
            exit 1
          fi
        shell: zsh {0}
        env:
          CI: "true"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform_plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    needs: ["build_base"]
    strategy:
      fail-fast: false
      matrix:
        environment: [ public, auth ]
    steps:
      - uses: actions/checkout@v4

      - name: Set TARGET_ENV
        run: |
          if [[ "${{ matrix.environment }}" == "public" ]]; then
            echo "TARGET_ENV=${{ needs.build_base.outputs.public_env }}" >> $GITHUB_ENV
          else
            echo "TARGET_ENV=${{ needs.build_base.outputs.auth_env }}" >> $GITHUB_ENV
          fi

      - name: Debug TARGET_ENV
        run: |
          echo "TARGET_ENV: $TARGET_ENV"
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh

      - name: Terraform plan
        run: |
          source uhd.sh
          uhd terraform init
          uhd terraform plan:layer 20-app $TARGET_ENV
        shell: zsh {0}

  terraform_apply:
    name: Terraform apply
    runs-on: ubuntu-latest
    needs: ["terraform_plan"]
    strategy:
      fail-fast: false
      matrix:
        environment: [ public, auth ]
    steps:
      - uses: actions/checkout@v4

      - name: Set TARGET_ENV
        run: |
          if [[ "${{ matrix.environment }}" == "public" ]]; then
            echo "TARGET_ENV=${{ needs.build_base.outputs.public_env }}" >> $GITHUB_ENV
          else
            echo "TARGET_ENV=${{ needs.build_base.outputs.auth_env }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh

      - name: Terraform apply
        run: |
          source uhd.sh
          uhd terraform apply:layer 20-app $TARGET_ENV
        shell: zsh {0}

  push_docker_images:
    name: Push docker images
    runs-on: ubuntu-latest
    needs: ["terraform_apply"]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: ./.github/actions/setup-zsh

      - name: Push Docker images
        run: |
          source uhd.sh
          uhd docker update public $PUBLIC_ENV
          uhd docker update auth $AUTH_ENV
        shell: zsh {0}

  restart_services:
    name: Restart services
    runs-on: ubuntu-latest
    needs: ["push_docker_images"]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh

      - name: Restart services
        run: |
          source uhd.sh
          uhd ecs restart-services
          uhd lambda restart-functions
        shell: zsh {0}

  terraform_destroy:
    name: Terraform destroy
    runs-on: ubuntu-latest
    needs: ["restart_services"]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.UHD_TERRAFORM_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: ./.github/actions/setup-terraform
      - uses: ./.github/actions/setup-zsh

      - name: Destroy Terraform resources
        run: |
          source uhd.sh
          uhd terraform destroy:layer 20-app $PUBLIC_ENV
          uhd terraform destroy:layer 20-app $AUTH_ENV
        shell: zsh {0}